generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Auth {
  id                   String   @id @default(auto()) @map("_id") @db.ObjectId
  user                 User?
  uId                  String   @unique
  username             String
  email                String   @unique
  password             String?
  avatarColor          String
  createdAt            DateTime @default(now())
  passwordResetToken   String?  @unique @default("")
  passwordResetExpires String?  @default("")
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  authId String @unique @db.ObjectId
  auth   Auth   @relation(fields: [authId], references: [id])

  profilePicture       String @default("")
  work                 String @default("")
  school               String @default("")
  location             String @default("")
  quote                String @default("")
  bgImageVersion       String @default("")
  bgImageId            String @default("")
  postsCount           Int    @default(0)
  followersCount       Int    @default(0)
  followingCount       Int    @default(0)
  passwordResetToken   Int?
  passwordResetExpires Int?

  blocked     String[] @unique @db.ObjectId
  blockedUser User?    @relation("User_Blocked", fields: [blocked], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userBlocked User?    @relation("User_Blocked")

  blockedBy     String[] @unique @db.ObjectId
  blockedByUser User?    @relation("BlockedByUser", fields: [blockedBy], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userBlockedBy User?    @relation("BlockedByUser")

  notifications Notification
  social        Social
  Post          Post[]
}

type Notification {
  messages  Boolean @default(true)
  reactions Boolean @default(true)
  comments  Boolean @default(true)
  follows   Boolean @default(true)
}

type Social {
  facebook  String
  instagram String
  twitter   String
  youtube   String
}

model Post {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  author User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  email          String
  avatarColor    String
  profilePicture String
  post           String    @default("")
  bgColor        String    @default("")
  imgVersion     String    @default("")
  imgId          String    @default("")
  feelings       String    @default("")
  gifUrl         String    @default("")
  privacy        String    @default("")
  commentsCount  Int       @default(0)
  reactions      Reactions
  createdAt      DateTime  @default(now())
}

type Reactions {
  like  Int @default(0)
  love  Int @default(0)
  haha  Int @default(0)
  wow   Int @default(0)
  sad   Int @default(0)
  angry Int @default(0)
}
